
.NET Core
	- What is .NET Core?
		- Open-source, cross platform framework for developing Web Applications
			- MVC, RESTful services, Single Page Apps, Blazor apps and Razor apps
			- Support WPF apps and Windows Forms apps
		- Community driven framework
		- Cloud based
		- Open-source standards
			- Lightweight
			- CLI based
			- containerzable
			- cross-platform (don't confuse with platform independent)
			- community driven
			- Restorable Packages
				- Add necessary packages from internet
				- No need to carry the packages when project is copied to other machines
				- Restore the packages any time ( dotnet restore)
				- packages list will be maintained in a file (.csproj)(node apps it is package.json)(python we have requirements.txt)
	- Why .NET Core?
	- How to create .NET Core Project?
		- We can use dotnet core CLI to create, run and test projects
		- Use visual studio to create , run and test projects
	- Dotnet CLI
		- Provides a base command as 'dotnet' 
		- We can create, restore packages, compile projects, run project and publish using CLI
			- Create  -> dotnet new <templatetype> [Options]
						eg: dotnet new mvc -n SampleProject -o MyProjectDir
						eg: dotnet new webapi
						eg: dotnet new web
						eg: dotnet new console
			- Restore - > dotnet restore
			- Build - dotnet build [options] 
			- Run - dotnet run [options]
			- Publish - dotnet publish [options]

Hosting model
	- Host is used to run and serve the application.
	- Host is responsible to start, serve and stop the application.
	- Self-Hosting and Web Server Hosting (IIS) available.
	- .NET Core runtime comes with an integrated web server called Kestral.
		- Kestral is light-weight, open-source and cross-platform web server.
	- In production use Kestral with other web servers for entiprise web server features
		- We can use IIS, Tomcat, NGINX as reverse proxy for Kestral.
	- Host Configuration is required
		- Listening port config
		- SSL supported or not
		- Request body Max Size
		- Services configured in Application 
			- Configuration sources such as CmdLine args, Env variables, Appsettings.json are already configured
	- WebHost/GenericHost [ only Generic Host]

App Life cycle
	- Program.cs -> Main() method
		- create and start a web server host
	- Startup.cs 
		-> ConfigureServices()
			- Configure the services required by the application
			- DI services are registered here
		-> Configure()
			- Used to create the Request Pipeline
			- It defines which of the middleware need to be executed when a request is received.
			- IApplicationBuilder instance is used to configure the pipeline 
			- Order of the middleware is important. 
		
Request pipeline
	- Run()
		- Called using the IApplicationBuilder object.
		- Run method is used as a short-circuit method, which terminates the request and send response.
	- Use()
		- It is used to create the middleware for our request pipeline	
	- Map()
		- 
	- MapWhen()
	
Configuration Sources
	- In .NET Framework web apps it allows us to read config from web.config only.
	- .NET Core web apps supports multiple configuration sources in one application. 
		- Cmd Line args 
		- Environment variables
			[Company]="Synergetics"
		- Json files
			- appsettings.json  + appsettings.Development.json
			- Assume we have a key value pair [Company] ="Hexaware"
		- Xml files
		- Ini Files
		- In memory objects (dictionary type)
		- Key per file
		- Cloud key vault
	- One configuration source can override other if same key exists.

Dependency Injection
	- .NET Framework DI can be implemented using Ninject or Unity 
	- DI is a pattern that helps us to develop loosly coupled application.
	- Removes the dependency on classes.
	- Typically in application user is responsible to create, manage and dispose the dependent service objects
		eg: In EmployeeController we use a service class SqlDataManager
			SqlDataManager provides function to insert, delete, update and read employee objects. 
			
			interface IDataManager
			{
				Employee AddEmployee(Employee emp);
				Employee GetByEmail(string email);
				IEnumerable<Employee> GetEmployees();
				Employee GetEmployee(int id);
				Employee UpdateEmployee(int id, Employee emp);
				Employee DeleteEmployee(int id);
			}
			
			class SqlDataManager:IDataManager
			{
				Employee AddEmployee(Employee emp);
				IEnumerable<Employee> GetEmployees();
				Employee GetEmployee(int id);
				Employee UpdateEmployee(int id, Employee emp);
				Employee DeleteEmployee(int id);
			}
			
			class PostgreDataManager:IDataManager
			{
				Employee AddEmployee(Employee emp);
				IEnumerable<Employee> GetEmployees();
				Employee GetEmployee(int id);
				Employee UpdateEmployee(int id, Employee emp);
				Employee DeleteEmployee(int id);
			}
			
			class EmployeeController:Controller
			{
				private IDataManager dm;
				private ValidationService vs;
				
				public EmployeeController(IDataManager datamanager, ValidationService v)
				{
					this.vs=v;
					this.dm=datamanager;
				}
				
				public IActionResult Index()
				{
					
					var data = dm.GetEmployees();
					return View(data);
				}
				
				[HttpPost]
				public IActionResult Create(Employee e)
				{
					
					var isValid= vs.Validate(e);
					if(isValid)
					{
						dm.AddEmployee(e);
						return RedirectToAction("Index");
					}
					else{
						return View(e);
					}
				}
			}
			
			class ValidationService
			{
				private IDataManager dm;
				
				public ValidationService(IDataManager d)
				{
					dm= d;
				}
				public bool Validate(Employee e)
				{
					var item=dm.GetByEmail(e.email)
					if(item!=null)
						return false;
					else
						return true;
				}
				
			}
	
			class Startup
			{
				public void ConfigureServices(IServicesCollection services)
				{
					services.AddTransient<IDataManager, PostgreDataManager>(); //only one instance
					services.AddScoped<>();
					services.AddTransient<>();
				}
			}
	- DI is a built-in feature in .NET Core
	- The default IoC container can be replaced by third-party IoC containers.
		eg: Autofac

Built-in middleware
	- UseStaticFiles()
		- used to serve static files from the configured location
		- As per the default configuration in GenericHost 'wwwroot' folder is considered as static files folder. 
	- UseDirectoryBrowser()
	- UseDefealtFiles()
	- UseFileServer() - Combine features of StaticFiles, DirectoryBrowser and Defaultfiles
	
Tag Helpers
	- Is an alternate for HTML Helpers
		- Html Helpers are used to generate HTML code from C# functions
		- @Html.TextBoxFor() -> Used to generate a textbox for binding
		- @Html.ActionLink() -> Creates a hyperlink
		- @Html.Partial() -> Includes a partial page
		- @Url.Action() -> Used to generate Url from given args
		- @Ajax.ActionLink() -> Create ajax enabled hyperlink
	- Tag helpers looks exactly like html tags
	- But Tag Helpers are actual C# class implementations
		<hello name="Sonu" />  can render to <p class="highlight">Hello Sonu</p>
	
Caching
	- Is used to improve the performance of application. 
	- Instead of accessing data from a datasource everytime, we can cache the data once in the cache storage and access it frequently.
	- Types of caching
		- Response Caching
			- The action result can be cached for a period of time.
			- Use [ResponseCache] annotation will be used on top of the action method
			- We need to use caching service in ConfigureServices method using services.AddResponseCaching()
			- We also need to use the caching middleware for enabling caching. we need to configure the app.UseResponseCaching() middleware.
		- InMemory Caching
			- We use in-memory cache to store data that is frequently accessed in out application.
			- We need to enable Inmemory cache service in configureserices method
			- IMemoryCache is the DI service interface that provide access to the cache storage. 
			- the cached data is stored in the application servers memory. 
			- Stick sessions or ARR (automatic Request routing) must be enable when running in distributed environment like server farms.
		- Distributed Caching
			- Store the cached data outside the app/server memory
			- Stored in a commonly accessible location such as SQL Server DB, Redis DB, NCacahe Server
			- We can use the IDistributedCache interface to access the cache storage
			- .NET Core is providing an in memory implementation of IDistributedCache for dev and test purposes.
			
State management 
	- Query String - Not Implementing
	- Hidden fields - Not Implementing	
	- Cookies - Not Implementing
	- Cache - Done
	- Session 
		- One of the Distributed caching must be enabled to use session.
		- services.AddSession() method must be called in ConfigureServices to configure Session service.
		- Use the app.UseSession() middleware to enable session in the application
		- Get, GetString for reading data
		- Set, SetString for storing data
		- By using Microsoft.AspNetCore.Http namespace we can use GetInt32, GetBoolean etc functions are availalbe.
	- TempData
		- Can persist data even in redirection
		- It can persist data untill it consumes or the request is completed.
		- Two providers - CookieTempDataProvider and SessionStateTempDataProvider
		- CookieTempData provider is the default 
		- Configure services.AddControllersWithViews().AddSessionStateTempDataProvider() to enable Session baed tempdata provider.
	- HttpContext.Items
		
Routing
	- Use Routing middleware
	- UseEndpoint
	- Use of Route annotation for route prefix and route template
	- Http method annotations
	- Passing URL Parameters using route templates
	
Entity Framework Core
	- EF is an ORM tool that helps us to perform DB operations
	- Model class objects are mapped to table entities
	- Microsoft.EntityframeworkCore package is used for EF operations
	- We can create a DbContext class that allows db operations 
	- Data annotations can be used in models for validation and schema definition.
	- EF Core supports DB First and Code first approaches
		- Code first is recommended appraoch for new applications
			- Allows us to do Database migration based on model changes
		- Db first is better when upgrading an existing application
			- While modernizing apps to run in cloud 
	
	
Web API
	- What is Web API?
		- Its a framework or technology to develop RESTful services
		- RESTful services are similar to SOAP based web services
		- Now, the front-end frameworks mostly use REST services, becoz it can be invoked directly using the URL. 
		- REST services are using the features of HTTP protocol
	- RESTful services
		- Representational State Transfer
		- Completely HTTP Based
			- It used HTTP protocol as communication protocol
			- Uses HTTP methods and URL to identify the action to invoke 
			- Supports different content types - XML and JSON (also can support other formats like CSV)
			- Http Headers can be used for deciding the data format - Accept and Content-Type
	- Endpoints
		- It is the combination of HTTP method and Url that points to an action
		- HTTP methods
			GET  -> Read data from server (Reqeust data from server)
			POST -> Create a new entry or file in server
			PUT  -> Replace and exiting file / entry in server. (Usually used in update )
			PATCH -> Update the entry in server.
			DELETE -> Remove an entry/file from server.
			OPTIONS -> Used to check the support for operations(Check which of the Http operations are supported) 
		- What is REST endpoints?
			GET http://localhost:5000/api/Products -> ProductController/GetProducts()
				Read all products
			POST http://localhost:5000/api/Products -> ProductController/AddProduct()
				Add a new product to stock
			GET http://localhost:5000/api/Products/10 -> ProductController/GetProduct(int id)
				Read a single product from server with id 10
			PUT http://localhost:5000/api/Products/10 -> ProductController/UpdateProduct(int id)
				Updates an exiting record with Id 10
			DELETE http://localhost:5000/api/Products/10 -> ProductController/DeleteProduct(int id)
				Deleting a single product with id 10
			GET http://localhost:5000/api/Products/brand/samsung -> ProductController/Search(string brand)
				Search products by brand name
		- What is Http Status Codes?
			- Status codes indicates the process execution status or response status.
			- Before processing the response data we need to evaluate the status code.
			2xx -> Success operations
				200 - OK
				201 - Created 
				204 - No Content 
			3xx - Redirection (used in web sites)
				304 - Temporary redirection
				305 - Cached redirection
				307 - Permenent redirection
			4xx - Client side error
				404 - Not Found
				401 - Unauthorized
				403 - Access Denied
				400 - BadRequest
			5xx - Server side error
				500 - Internal Server Error
				501 - Timed out
		- Http Headers
			- The reqeust and response contains headers 
			- Headers are key-value pair entries
			- Used to specify the metadata or additional informations about request or respose data.
				Content-Type 
					Present in Request and Response
					Specifies the type of the data you sent or receive. 
					Content-Type : application/json
					Content-Type : text/xml
					Content-Type : text/html 
				Accept
					Determines the Response content-type
					It is present in reqeust header only
				
	- Return type in API Actions
		- Primary types  - String, int, boolean, float 
		- User defined types - classes and structures
		- Collections - IEnumerable
		- ActionResult<T> 
		- Task<ActionResult<T>> for Async
Content Negotiation
	- By default the API server send the response using the default formatter.
	- In .NET Core it uses application/json or text/json as the default formatters.
	- Client can request for a specific content format using Accept header.
	- API server checks the valid formatter available to format the data in requested content type. 
	- Response - If the foratter is not available it uses the default formatter.
	- Request - If incoming data format is not supported the api will return 415-Media Type not supported
			
CORS
	- Cross Origin Resource Sharing
	- It is a security policy implied by the framework to protect APIs from external domains. 
	- PRovide access to APIs from configured domains with controlled access.
	- Limit the access to operations by defining allowed methods.
	- Microsoft.AspNetCore.Cors package is used to configure the CORS policy.
	- Configure the CORS service and CORS middleware.
			
Microservices
	- What is Pattern?
		Solution for the problems that continues occurs in out app development
		Some architectural patterns are - monolithic, SOA and Microservices
	- What is Monolithic applications and its disadvantages?
		Tightly coupled applications that inplements all project modules in single project. 
		- Cannot choose different frameworks and technologies
		- Module level scaling not possible. NEed to scale the entire project.
		- Deployment time is higher, becoz we need to deploy the entire application.(app size is larger)
		- Error in one module leads to the downtime of the application. Becoz entire app crashes.
		- Using polyglot persistence is complex
		- Redeployment of single module without affecting entire app downtime is not possible.
		- Containerization become difficult as the application size increases 
	- What is the advantage of SOA?
		- SOA is an architecture that helps developers to develop loosely coupled applications.
		- Each module of the project is developed as individual services.
		- modules are created as reusable services that can be integrated into any client applications
			SOAP Web services
			RESTful services
	- What is Microservices?
		- Microservices are independently project that can be tested independently and deployed independently.
		- Each module is created as reusable services
		- Different languages and frameworks can be used
		- Each service has its own database, they never share database
		- Scaling of individual services are possible
		- Can deploy a service without affecting other services
	- How Microservices are different from SOA?
		- DB not shared
		- Services can communicate each other
		- No ESB required
		
Communication patterns in microservices
	- REST endpoint (Http based communication)
		- Sender and receiver must be online.
		- nearly Real time communication	
		- One-to-one communication
		- By default synchronous type
		- Communication ends when a response is received, a response indicates communication ends. 
	- Message based communication 
		- Sender and receiver need not to be online at same time.
		- A message broker service provides a temporary storage queue to persist messages for a period of time. 
		- Supports one-to-one and one-to-many communication.
		- Not real time communication
		- It is asynchronous
		- No response expected to complete the communication.
	- Event-Driven architecture
		- it is real time communication. 
		- it can be handled by multiple receivers(event handlers)
		- No response expected 
		- it can be asynchronous
	
Authentication schemes
	- Windows Authentication
	- Basic 
	- Bearer 
	- We use 'Authorization' header in reqeust.
		- Authorization : <schemename> <credentials>
		-eg: Authorization : Basic jdsfkjenjfkw3kfjfjd
		-eg: Authorization : Bearer kdkjsdfjhfjdshfsfhfhsdgsdjgsklg.ljhskhsjhdsfjksfsdjfs.lkjshfsfhh
		
		
Docker
	The packaged application file is called image.
	We can start multiple instances of the application by using the same image.
				
				
				
				
				
				
				
				
				
				